{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/apod/apod.component.html","./src/app/apod/apod.component.ts","./src/app/app.module.ts","./src/app/api/apod.service.ts","./config/ng-apod.config.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'NASA APOD';\n}\n","<router-outlet></router-outlet>>","<main *ngIf=\"apod\">\n\n  <h1>{{ apod.title }}</h1>\n\n  <!-- Only show the image element if the media_type is set to image -->\n  <img *ngIf=\"apod.media_type==='image'\" [src]=\"apod.url\" [alt]=\"apod.title\">\n\n  <!-- Display and embed the YouTube video if the media_type is set to video -->\n  <div id=\"video\" *ngIf=\"apod.media_type==='video'\">\n    <iframe [src]=\"apod.url | safe: 'resourceUrl'\" frameborder=\"0\" allowfullscreen></iframe>\n  </div>\n  \n  <div>\n    <span *ngIf=\"apod.copyright\" class=\"copy\">&copy; {{ apod.copyright }} </span>\n    {{ apod.date }}\n  </div>\n\n  \n\n  <p>{{ apod.explanation }}</p>\n\n  <button *ngIf=\"date\" [routerLink]=\"['/apod', this.date]\">Random</button>\n\n</main>","import { Component, OnInit } from '@angular/core';\n//1. Import ActivatedRoute\nimport { ActivatedRoute } from '@angular/router';\nimport { ApodService } from '../api/apod.service';\nimport { Apod } from '../models/apod';\n\n@Component({\n  selector: 'app-apod',\n  templateUrl: './apod.component.html',\n  styleUrls: ['./apod.component.scss']\n})\nexport class ApodComponent implements OnInit {\n\n  apod: Apod[] = [];\n  date: string = '';\n\n\n\n  constructor(\n    private apodService: ApodService,\n    //2. Inject ActivatedRoute into the constructor\n    private router: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    //3. Subscribe to parameterized route\n    this.router.params.subscribe((params) => {\n      this.getApod(params['date']);\n    });\n  }\n\n  //4. Replace the current date with an updated method signature\n  getApod(date: string): void {\n\n    //If the date is falsy, use today's date\n    if (!date) {\n      date = new Date().toISOString().slice(0, 10);\n    }\n\n    this.apodService.getApod(date).subscribe(\n      (response: any) => {\n        this.apod = response;\n        this.date = this.randomDate(new Date(1995, 5, 16), new Date());\n        //5. Log the results to the JS console\n        console.log(this.date);\n      }\n\n    );\n  }\n  randomDate(start:any, end:any): string {\n    let date = new Date(\n      start.getTime() + Math.random() *\n      (end.getTime() - start.getTime())\n    );\n\n    return new Date(date).toISOString().slice(0, 10);\n  }\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n//Import LocationStrategy, HashLocationStrategy\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ApodComponent } from './apod/apod.component';\n\nimport { SafePipeModule } from 'safe-pipe';\n\nimport { NgApodConfig } from '../../config/ng-apod.config';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ApodComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    SafePipeModule\n  ],\n  providers: [\n    NgApodConfig,\n    //Update your providers list\n    { provide: LocationStrategy, useClass: HashLocationStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Injectable } from '@angular/core';\n//Import HttpClient\nimport { HttpClient } from '@angular/common/http';\n\n//Import Observable\nimport { Observable } from 'rxjs';\n\n//Import Apod\nimport { Apod } from '../models/apod';\n\nimport { NgApodConfig } from '../../../config/ng-apod.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApodService {\n\n  private url:string\n\n  constructor(\n    private http: HttpClient,\n    private ngApodConfig: NgApodConfig\n  ) {\n    this.url=`https://api.nasa.gov/planetary/apod?api_key=${this.ngApodConfig.key}`;\n  }\n\n  //Return an Observable Apod model\n  getApod(date:string): Observable<Apod>{\n    return this.http.get<Apod>(`${this.url}&date=${date}`);\n  }\n\n}","export class NgApodConfig {\n    key:string = '10h8VfkYX3QfM0bSdpZkBGzsBxftS5LwD2GSjWcE';\n  }","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n// 1. import the component to which you want to redirect.\nimport { ApodComponent } from './apod/apod.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/apod', pathMatch: 'full'},\n  { path: 'apod', component: ApodComponent },\n  { path: 'apod/:date', component: ApodComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}